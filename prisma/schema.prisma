// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String   @default("#3B82F6") // Default blue color
  icon        String   @default("üìÅ") // Default folder icon
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tasks Task[]

  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String   @default("#6B7280") // Default gray color
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tasks TaskTag[]

  @@map("tags")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?    // Supports markdown
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  completed   Boolean    @default(false)
  completedAt DateTime?
  imageUrl    String?    // For image attachments
  position    Int        @default(0) // For custom ordering
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tags       TaskTag[]

  @@map("tasks")
}

model TaskTag {
  id     String @id @default(cuid())
  taskId String
  tagId  String

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([taskId, tagId])
  @@map("task_tags")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
} 